plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$architectury_api_version"

    // Mixin Extras
    implementation(include(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras}")))
    // Mixin Squared
    implementation(include("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${mixin_squared}"))
    // Conditional Mixin
    implementation(include("me.fallenbreath:conditional-mixin-fabric:${conditional_mixin}"))

    // VS2
    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${vs2_version}") { transitive = false }
    compileOnly("org.valkyrienskies.core:api:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:api-game:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:util:${vs_core_version}")
    compileOnly("org.valkyrienskies.core:impl:${vs_core_version}")
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"
    api "org.jetbrains.kotlin:kotlin-reflect:1.9.10"

    // region Mods
    // Forge Config API Port
    modImplementation("maven.modrinth:forge-config-api-port:1aKtMQZE")
    // HT's Treechop
    modImplementation("maven.modrinth:treechop:bLPE7MWZ") // different version than in `common`

    // PuzzlesLib
    modImplementation("maven.modrinth:puzzles-lib:qjSRRf2B")
    // Echo Chest
    modImplementation("maven.modrinth:echo-chest:ppi4nxw2")

    // Use Create Fabric as common
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Fabric Language Kotlin
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")
    // VS Addition
    //modLocalRuntime("maven.modrinth:vs-addition:1.20.1-0.0.10") { transitive false }

    // Clockwork
    modImplementation("maven.modrinth:create-clockwork:EvNWNIMY")
    // endregion

    // QoL, performance, utils
    modLocalRuntime("maven.modrinth:sodium:${sodium_version}")
    modLocalRuntime("maven.modrinth:indium:${indium_version}")
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
