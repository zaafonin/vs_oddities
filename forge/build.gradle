plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "vs_oddities.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    // Mixin Extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras}"))
    // Mixin Squared
    compileOnly(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:${rootProject.mixin_squared}"))
    implementation(include("com.github.bawnorton.mixinsquared:mixinsquared-forge:${rootProject.mixin_squared}"))
    // Conditional Mixin
    implementation(include("me.fallenbreath:conditional-mixin-forge:${rootProject.conditional_mixin}"))

    // VS2
    modApi("org.valkyrienskies:valkyrienskies-120-forge:${rootProject.vs2_version}") { transitive = false }
    implementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:util:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}")
    implementation("thedarkcolour:kotlinforforge:$forge_kotlin_version")

    // HT's Treechop
    modImplementation("maven.modrinth:treechop:0.19.0")

    // Echo Chest
    modImplementation("maven.modrinth:echo-chest:aQcerSRS")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':common', configuration: 'transformProductionForge')) { transitive false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
