plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "vs_oddities.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
    shadowCommon
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    // Mixin Extras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras}"))
    // Mixin Squared
    compileOnly(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-common:${rootProject.mixin_squared}"))
    implementation(include("com.github.bawnorton.mixinsquared:mixinsquared-forge:${rootProject.mixin_squared}"))
    // Conditional Mixin
    implementation(include("me.fallenbreath:conditional-mixin-forge:${rootProject.conditional_mixin}"))

    // Valkyrien Skies 2
    modApi("org.valkyrienskies:valkyrienskies-120-forge:${rootProject.vs2_version}") { transitive = false }
    forgeRuntimeLibrary implementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}") { transitive = false }
    //implementation("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}") { transitive = false }
    forgeRuntimeLibrary implementation("org.valkyrienskies.core:util:${rootProject.vs_core_version}") { transitive = false }
    //forgeRuntimeLibrary implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") { transitive = false }
    forgeRuntimeLibrary implementation("thedarkcolour:kotlinforforge:$forge_kotlin_version")

    // region Manually include every single dependency of vs-core (total meme)
    /*forgeRuntimeLibrary include("org.valkyrienskies.core:api:${rootProject.vs_core_version}") {
        transitive = false
    }

    forgeRuntimeLibrary include("org.valkyrienskies.core:util:${rootProject.vs_core_version}") {
        transitive = false
    }*/

    forgeRuntimeLibrary implementation("javax.inject:javax.inject:1") { transitive = false }

    // JOML for Math
    forgeRuntimeLibrary implementation("org.joml:joml:1.10.4") { transitive = false }
    forgeRuntimeLibrary implementation("org.joml:joml-primitives:1.10.0") { transitive = false }

    // Apache Commons Math for Linear Programming
    forgeRuntimeLibrary implementation("org.apache.commons:commons-math3:3.6.1") { transitive = false }

    // Jackson Binary Dataformat for Object Serialization
    def jacksonVersion = '2.14.0'
    // forked to remove module-info
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion-rubyfork") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml.jackson.core:jackson-core:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary implementation("com.github.Rubydesic:jackson-kotlin-dsl:1.2.0") { transitive = false }
    forgeRuntimeLibrary implementation("com.networknt:json-schema-validator:1.0.71") { transitive = false }
    forgeRuntimeLibrary implementation("com.ethlo.time:itu:1.7.0") { transitive = false }
    forgeRuntimeLibrary implementation("com.github.victools:jsonschema-module-jackson:4.25.0") { transitive = false }
    forgeRuntimeLibrary implementation("com.github.victools:jsonschema-generator:4.25.0") { transitive = false }
    forgeRuntimeLibrary implementation("com.fasterxml:classmate:1.5.1") { transitive = false }
    forgeRuntimeLibrary implementation("com.flipkart.zjsonpatch:zjsonpatch:0.4.11") { transitive = false }
    forgeRuntimeLibrary implementation("org.apache.commons:commons-collections4:4.3") { transitive = false }
    forgeRuntimeLibrary implementation("com.google.dagger:dagger:2.43.2") { transitive = false }

    // endregion

    // region Mods
    // HT's Treechop
    modImplementation("maven.modrinth:treechop:0.19.0")

    // PuzzlesLib
    modImplementation("maven.modrinth:puzzles-lib:YFZdsqXl")
    // Why again do we have to explicitly include embedded stuff? F the Forge side of Architectury.
    modImplementation("fuzs.puzzlesaccessapi:puzzlesaccessapi-forge:20.1.1")
    // Echo Chest
    modImplementation("maven.modrinth:echo-chest:aQcerSRS")

    // Create
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
    // endregion

    // QoL, performance, utils
    modLocalRuntime("maven.modrinth:embeddium:${embeddium_version}")
    modLocalRuntime("maven.modrinth:canary:${canary_version}")
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':common', configuration: 'transformProductionForge')) { transitive false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
